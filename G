<!DOCTYPE html>
<html lang="ko">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>플래피게임</title>
  <style>
    * { margin: 0; padding: 0; box-sizing: border-box; }
    body, html { overflow: hidden; width: 100%; height: 100%; font-family: sans-serif; }
    canvas {
      display: block;
      background: url('https://i.postimg.cc/mryJTycM/IMG-0998.jpg') no-repeat center center;
      background-size: cover;
    }
    #startScreen {
      position: absolute;
      width: 100%;
      height: 100%;
      background: rgba(0,0,0,0.7);
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      z-index: 10;
    }
    #startScreen img {
      width: 150px;
      margin-bottom: 20px;
    }
    #startBtn {
      padding: 15px 30px;
      font-size: 20px;
      background: yellow;
      border: none;
      border-radius: 10px;
      cursor: pointer;
    }
    #scoreBoard {
      position: absolute;
      top: 10px;
      left: 50%;
      transform: translateX(-50%);
      background: rgba(255,255,255,0.7);
      padding: 10px 20px;
      font-size: 24px;
      border-radius: 10px;
      user-select: none;
      z-index: 5;
    }
  </style>
</head>
<body>
  <div id="startScreen">
    <img src="https://i.postimg.cc/sxv5vT1L/Screenshot-20250731-005347-Gallery.jpg" alt="Bird" />
    <button id="startBtn">게임 시작</button>
  </div>
  <div id="scoreBoard">점수: 0</div>
  <canvas id="gameCanvas"></canvas>

  <script>
    const canvas = document.getElementById("gameCanvas");
    const ctx = canvas.getContext("2d");
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;

    const birdImg = new Image();
    birdImg.src = "https://i.postimg.cc/sxv5vT1L/Screenshot-20250731-005347-Gallery.jpg";

    const coinImg = new Image();
    coinImg.src = "https://i.postimg.cc/bYDrpCyn/IMG-1013.png";

    let bird = {
      x: 100,
      y: 200,
      width: 50,
      height: 50,
      gravity: 0.5,
      velocity: 0,
      jumpPower: -8
    };

    let pipes = [];
    let coins = [];
    let score = 0;
    let isPlaying = false;

    function drawBird() {
      ctx.drawImage(birdImg, bird.x, bird.y, bird.width, bird.height);
    }

    function drawPipe(pipe) {
      ctx.fillStyle = "green";
      ctx.fillRect(pipe.x, 0, pipe.width, pipe.top);
      ctx.fillRect(pipe.x, pipe.top + pipe.gap, pipe.width, canvas.height - pipe.top - pipe.gap);
    }

    function drawCoin(coin) {
      if (coinImg.complete) {
        ctx.drawImage(coinImg, coin.x - 15, coin.y - 15, 30, 30);
      } else {
        // 이미지 미로딩 시 기본 원 그리기
        ctx.beginPath();
        ctx.arc(coin.x, coin.y, 10, 0, Math.PI * 2);
        ctx.fillStyle = "gold";
        ctx.fill();
      }
    }

    function resetGame() {
      bird.y = 200;
      bird.velocity = 0;
      pipes = [];
      coins = [];
      score = 0;
      document.getElementById("scoreBoard").textContent = `점수: ${score}`;
    }

    function gameOver() {
      isPlaying = false;
      document.getElementById("startScreen").style.display = "flex";
    }

    function gameLoop() {
      if (!isPlaying) return;

      ctx.clearRect(0, 0, canvas.width, canvas.height);

      // 새 위치 및 중력
      bird.velocity += bird.gravity;
      bird.y += bird.velocity;

      // 땅에 닿으면 게임 오버
      if (bird.y + bird.height > canvas.height) {
        gameOver();
        return;
      }

      // 파이프 생성 조건
      if (pipes.length === 0 || pipes[pipes.length - 1].x < canvas.width - 300) {
        const top = Math.random() * (canvas.height / 2);
        pipes.push({ x: canvas.width, top: top, gap: 180, width: 60 });
      }

      // 파이프 이동 및 충돌 체크
      for (let i = pipes.length - 1; i >= 0; i--) {
        const pipe = pipes[i];
        pipe.x -= 3;

        drawPipe(pipe);

        if (
          bird.x < pipe.x + pipe.width &&
          bird.x + bird.width > pipe.x &&
          (bird.y < pipe.top || bird.y + bird.height > pipe.top + pipe.gap)
        ) {
          gameOver();
          return;
        }

        // 화면 밖으로 나간 파이프 제거
        if (pipe.x + pipe.width < 0) {
          pipes.splice(i, 1);
        }
      }

      // 코인 생성 확률 조절
      if (Math.random() < 0.01) {
        coins.push({
          x: canvas.width,
          y: Math.random() * (canvas.height - 100) + 50
        });
      }

      // 코인 이동 및 충돌 체크
      for (let i = coins.length - 1; i >= 0; i--) {
        const coin = coins[i];
        coin.x -= 3;

        drawCoin(coin);

        // 충돌 범위(30x30 이미지 기준)
        if (
          bird.x < coin.x + 15 &&
          bird.x + bird.width > coin.x - 15 &&
          bird.y < coin.y + 15 &&
          bird.y + bird.height > coin.y - 15
        ) {
          score += 1000;
          coins.splice(i, 1);
        }

        // 화면 밖으로 나간 코인 제거
        if (coin.x + 30 < 0) {
          coins.splice(i, 1);
        }
      }

      drawBird();

      // 점수 업데이트
      score++;
      document.getElementById("scoreBoard").textContent = `점수: ${score}`;

      requestAnimationFrame(gameLoop);
    }

    // 조작: 클릭 또는 터치 시 점프
    function jump() {
      if (isPlaying) {
        bird.velocity = bird.jumpPower;
      }
    }
    window.addEventListener("mousedown", jump);
    window.addEventListener("touchstart", jump);

    // 게임 시작 버튼
    document.getElementById("startBtn").addEventListener("click", () => {
      resetGame();
      document.getElementById("startScreen").style.display = "none";
      isPlaying = true;
      gameLoop();
    });

    // 창 크기 변경시 캔버스 크기 조절
    window.addEventListener("resize", () => {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    });
  </script>
</body>
</html>
